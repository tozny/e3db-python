from uuid import UUID
from nacl import public
import requests
from requests import auth
from requests.auth import AuthBase
from .sodium_crypto import SodiumCrypto
from .base_crypto import BaseCrypto
import datetime 

class E3DBTSV1Auth(AuthBase):
    HASHING_ALGORITHM = "BLAKE2B"
    SIGNATURE_TYPE = "ED25519"
    AUTHENTICATION_METHOD = "TSV1-" + SIGNATURE_TYPE + "-" + HASHING_ALGORITHM
    AUTHORIZATION_HEADER = "Authorization"
    SECRET_KEY_BYTES = 32

    def __init__(self, private_signing_key: str, client_id: str):
        self.private_signing_key = private_signing_key
        self.client_id = client_id

        self.private_b64_decoded = BaseCrypto.base64decode(self.private_signing_key)[:self.SECRET_KEY_BYTES]
        self.signing_key = SodiumCrypto.generate_signing_key(self.private_b64_decoded)
        self.public_signing_key = self.signing_key.verify_key
        self.public_b64 = BaseCrypto.base64encode(self.public_signing_key).decode("utf-8") 


    def __call__(self, r: requests.Request):
        """
        TSV1 authentication of requests. Sets the authorization header of a request
        to be the client's signature. 

        Signature is generated by deriving and decoding signing key, calculating
        the header values from the request, and then signing the hash of the header values
        wth the client's private signing key.

        Parameters
        ----------
        r : requests.Request

        Returns
        -------
        requests.Request
            Request with authentication headers set with signature. 
        """
        timestamp = datetime.datetime.now()
        nonce = SodiumCrypto.random_nonce()
        self.create_tsv1_signature(r, nonce, timestamp)
        return r

    @classmethod
    def create_tsv1_signature(self, r: requests.Request, nonce: UUID, timestamp: int):
        """
        Creates a TSV1 Signature and sets the request's authorization header.

        Parameters
        ----------
        r : requests.Request
        
        nonce : UUID

        timestamp : int

        Returns
        -------
        None
        """

        # Generate header values
        header_string = f"{self.AUTHENTICATION_METHOD}; {self.public_b64}; {timestamp}; {nonce}; uid:{self.client_id}"

        call_path = r.url
        query_string = r.params
        call_method = r.method

        # Hash header values
        string_to_hash = f"{call_path}; {query_string}; {call_method}; {header_string}"

        # Sign hash
        string_to_sign = BaseCrypto.hashString(string_to_hash)
        full_signature = SodiumCrypto.sign_string(string_to_sign, self.private_b64_decoded)
        signature_b64 = BaseCrypto.base64encode(full_signature.signature).decode("utf-8")

        # Add authorization headers to request
        auth_header = f"{header_string}; {signature_b64}"
        r.headers[self.AUTHORIZATION_HEADER] = auth_header
